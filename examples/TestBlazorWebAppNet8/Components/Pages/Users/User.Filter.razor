@page "/users"
@rendermode InteractiveServer
@using DataTransferObjects.Users
@using Services.Users
@inject IUsersService UserService

<h3>User List</h3>

<NavLink class="btn btn-primary mb-3" href="/users/create">Create New</NavLink>

@if (Users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Name</th>
                <th>Email</th>
                <th>Password</th>
                <th>Id</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Users)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Email</td>
                    <td>@item.Password</td>
                    <td>@item.Id</td>
                    <td>
                        <NavLink class="btn btn-sm btn-info" href="@($"/users/{item.Id}")">Details</NavLink>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(item.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserViewModel> Users;

    protected override void OnInitialized()
    {
        _ = LoadAsync();
    }

    async Task LoadAsync()
    {
        Users = await UserService.GetAllAsync();
        await InvokeAsync(StateHasChanged);
    }

    async Task DeleteUser(Int32 id)
    {
        await UserService.DeleteAsync(id);
        Users = await UserService.GetAllAsync(); // Refresh list
    }
}
