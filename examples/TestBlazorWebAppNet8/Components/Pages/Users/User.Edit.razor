@page "/users/edit/{Id:int}"
@using DataTransferObjects.Users
@using Services.Users
@using TestApiNet8.Domain.Entities
@inject IUsersService UserService
@inject NavigationManager NavigationManager
@inject AutoMapper.IMapper _mapper

<h3>Edit User</h3>

@if (userModificationDto == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@userModificationDto" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="userModificationDto.Name" />
            <ValidationMessage For="@(() => userModificationDto.Name)" />
        </div>
        <div class="form-group mb-3">
            <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="userModificationDto.Email" />
            <ValidationMessage For="@(() => userModificationDto.Email)" />
        </div>
        <div class="form-group mb-3">
            <label for="password">Password:</label>
        <InputText id="password" class="form-control" @bind-Value="userModificationDto.Password" />
            <ValidationMessage For="@(() => userModificationDto.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public Int32 Id { get; set; }

    private UserModificationDto? userModificationDto;

    protected override async Task OnParametersSetAsync()
    {
        var entityViewModel = await UserService.GetByIdAsync(Id);
        if (entityViewModel != null)
        {
            userModificationDto = _mapper.Map<UserModificationDto>(entityViewModel);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (userModificationDto != null)
        {
            await UserService.UpdateAsync(Id, userModificationDto);
            NavigationManager.NavigateTo("/users");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/users");
    }
}
