//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Common.Paginations.Models;
using Common.Paginations.Extensions;
using Common.ServiceAttribute;
using Common;
using DataTransferObjects.Orders;
using TestApiWithNet8;
using TestApiNet8.Domain.Entities;

namespace Services.Orders
{
    [ScopedService]
    public class OrdersService : IOrdersService
    {
        private readonly TestApiNet8Db _testApiNet8Db;
        private readonly IMapper _mapper;
        public OrdersService(TestApiNet8Db testApiNet8Db, IMapper mapper)
        {
            _testApiNet8Db = testApiNet8Db;
            _mapper = mapper;
        }

        public async Task<OrderViewModel> AddAsync(OrderCreationDto orderCreationDto)
        {
            var entity = _mapper.Map<Order>(orderCreationDto);
            var entry = await _testApiNet8Db.Set<Order>().AddAsync(entity);
            await _testApiNet8Db.SaveChangesAsync();
            return _mapper.Map<OrderViewModel>(entry.Entity);
        }

        public async Task<List<OrderViewModel>> GetAllAsync()
        {
            var entities = await _testApiNet8Db.Set<Order>().ToListAsync();
            return _mapper.Map<List<OrderViewModel>>(entities);
        }

        public async Task<ListResult<OrderViewModel>> FilterAsync(PaginationOptions filter)
        {
            var paginatedResult = await _testApiNet8Db.Set<Order>().ApplyPaginationAsync(filter);
            var Orders = _mapper.Map<List<OrderViewModel>>(paginatedResult.paginatedList);
            return new ListResult<OrderViewModel>(paginatedResult.paginationMetadata, Orders);
        }

        public async Task<OrderViewModel> GetByIdAsync(int id)
        {
            var entity = await _testApiNet8Db.Set<Order>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Order with Id {id} not found.");
            return _mapper.Map<OrderViewModel>(entity);
        }

        public async Task<OrderViewModel> UpdateAsync(int id, OrderModificationDto orderModificationDto)
        {
            var entity = await _testApiNet8Db.Set<Order>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Order with {id} not found.");
            _mapper.Map(orderModificationDto, entity);
            var entry = _testApiNet8Db.Set<Order>().Update(entity);
            await _testApiNet8Db.SaveChangesAsync();
            return _mapper.Map<OrderViewModel>(entry.Entity);
        }

        public async Task<OrderViewModel> DeleteAsync(int id)
        {
            var entity = await _testApiNet8Db.Set<Order>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Order with {id} not found.");
            var entry = _testApiNet8Db.Set<Order>().Remove(entity);
            await _testApiNet8Db.SaveChangesAsync();
            return _mapper.Map<OrderViewModel>(entry.Entity);
        }
    }

    /// <summary>
    /// AutoMapper mapping profile for Order entity.
    /// </summary>
    public class OrderMappingProfile : Profile
    {
        public OrderMappingProfile()
        {
            CreateMap<Order, OrderViewModel>();
            CreateMap<OrderCreationDto, Order>();
            CreateMap<OrderModificationDto, Order>();
        }
    }
}